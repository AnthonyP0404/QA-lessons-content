all practical work done in the vm in the vm 


- Summarised Notes

I SHOULD ALWAYS SAY WHICH DATABASE I AM USING


------This is the specific order:

USE (db_name)
GO

SELECT 	    (col_name) , (col_name2)
	can do 'SELECT TOP 10' to get the first 10 results
		with ties show those with same result as last one so can make list longer ('distinct' and 'with ties' are opposite)
FROM 	    (table_name)
JOIN		(table_2) on (predicate (using 2-part names))
WHERE	    (condition)
GROUP BY    (fields eg. col_name)
	anything not in an aggregate function should go here
HAVING	    (group-level filter)
	similar to WHERE but can have aggregate functions
ORDER BY    (fields eg. col_name or col_number) 
	ascending by default 'asc'. 'desc' to go descending
	can order by expressions

SELECT DISTINCT TOP - FROM - JOIN - WHERE - GROUP BY - HAVING - ORDER BY
------


Aggregate functions : count(r) --counts values in row r, count(*) --counts rows, min(), max(), avg(), sum()


logical operators : AND OR NOT		(AND takes precedence over OR so does ANDs first - just bracket em)
special operators : IN BETWEEN LIKE
	IN 	- replacement for multipls OR's
	BETWEEN - specifies a range
	LIKE	- similar to == but needed for partial string comparisons (using % and _)
	% 	- can be put infront/behind text to ignore what's infront/behind it

Possible returns: TRUE FALSE NULL
<> instead of !=
'IS NULL'  instead of  '= NULL'
Aggregate - when many things become one


Relational databases - using multiple tables
Primary keys  - reference point for other tables
Foreign keys  - referal to another table
	when your query involves more than 1 table, the columns should have 2-part names
		2-part name: tableName.columnName

Inner join (default) 		 	 - matches columns on both tables only, basically = is not null
Left/Right/Full (outer) join 	 - useful for finding mismatches/nulls


union, except, intersect - all go between 2 different select statements
	union  	  - prints ALL from both selects with NO DUPLICATES (unless you do 'union all', then prints ALL)
	except	  - prints all rows from table1 that dont appear in table2
	intersect - prints all rows that appear in both tables


functions
	text
		left(col_name, numOfCharacters)			- num of characters from left
		right(----------||------------)			- num of characters from right
		substring(str,p1,p2)					- same as above but in range p1 to p2
		upper(str)								- makes str uppercase
		lower(str)								- makes str lowercase
		charindex('char',str,num)				- shows index of 'char' in str starting at num
		len(str)								- num of characters
	date 
		getdate()								- gives current date and time 
		dateadd(datepart,num,expr)				- adds 'num' to 'datepart' of 'expr'
		datediff(datepart,startdate,enddate)	- difference in 'datepart' from startdate to enddate
		datepart(datepart,expr)					- gets datepart of expr
	null	
		isnull(expr,null-value)					- is expr is null, return 'null-value'
		coalesce(list,str)		*				- replaces null with str - same as isnull but for more expr's - good for addresses
	conversions
		cast(expr AS type)
		convert(char(n), expr, style)	*		- converts expr into individual characters of length n, style optional for format
	
	insert
	update 'table' set 'stuff' where 'this is that'
	delete - make sure it has a WHERE or it deletes all the rows
		


views:
	create view 'name'
	as
	'select statement here'
	go
		can then select * from 'name' and will return the same as the select statement - basically stores a select statement 

	alter view 'name'
	as
	'select statement here'
	go
		changes it

	drop view 'name'
		deletes it


store procedure:
	sp_help 'name'
	sp_helptext 'name' 	- shows what's inside 'name' if it's not encrypted
	exec dbo.'name'		- runs it
	

TVF - table value functions
	inline
	multiline

Derived tables aka inline-view
	not stored in db 
	allow for more modular queries
	must have alias and unique names for columns
	basically putting a view in FROM(here)
	this is to get around needing the privileges to create views
	can put in where if using an aggregate function as it needs 1 value
		correlated subquery ting

CTE - common table expressions
	WITH cte_name AS (query), cte_name2 AS (query2), etc
		, is important for creating several CTEs
	good as it doesnt create objects (ie. views/functions) so doesnt store it
	also avoids needing rights for views
	doesnt need to be in the regular order, can be out the way eg after the whole select statement

temporary tables
	# - singular - local - only works on set session/tab
	## - double - global - wont close until all who use it stop their session
	eg. 'create table #name' or 'insert into ##averages'

table variables
	declare @name TABLE (
		column definitions
	)
	even more local than temporary tables	
		local to the batch instead of the session
	

APPLY
	cross - does for every row
	probably wont use


windowing
	replaces group by?
	clauses
	OVER 
	PARTITION BY
	BETWEEN n PRECEDING AND CURRENT ROW
	rank() dense_rank() row_number() ntile() convert()
	order by	
		lead			- gets next row
		lag 			- gets previous row
		first_value 	- ye
		last_value		- explains itself